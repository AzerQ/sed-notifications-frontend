import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { NotificationsBar } from '../NotificationsBar/NotificationsBar';
import { mockNotifications } from './utils/testUtils';

describe('NotificationsBar', () => {
  const defaultProps = {
    notifications: mockNotifications,
    onNotificationUpdate: jest.fn(),
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É', () => {
    render(<NotificationsBar {...defaultProps} />);

    const searchInput = screen.getByPlaceholderText('–ü–æ–∏—Å–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º...');
    expect(searchInput).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É', () => {
    render(<NotificationsBar {...defaultProps} />);

    expect(screen.getByText('–§–∏–ª—å—Ç—Ä—ã:')).toBeInTheDocument();
    expect(screen.getByText('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', () => {
    render(<NotificationsBar {...defaultProps} />);

    expect(screen.getByText('–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç')).toBeInTheDocument();
    expect(screen.getByText('–¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–µ')).toBeInTheDocument();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getAllByText –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    expect(screen.getAllByText('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')).toHaveLength(2);
  });

  it('–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', () => {
    render(<NotificationsBar {...defaultProps} />);

    expect(screen.getByText('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')).toBeInTheDocument();
    expect(screen.getByText('üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', () => {
    render(<NotificationsBar {...defaultProps} />);

    expect(screen.getByText('2 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    const searchInput = screen.getByPlaceholderText('–ü–æ–∏—Å–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º...');
    await user.type(searchInput, '–¥–æ–∫—É–º–µ–Ω—Ç');

    await waitFor(() => {
      expect(screen.getByText('–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç')).toBeInTheDocument();
      expect(screen.queryByText('–¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–µ')).not.toBeInTheDocument();
      expect(screen.queryByText('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')).not.toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    const typeSelect = screen.getByText('–í—Å–µ —Ç–∏–ø—ã').closest('div');
    await user.click(typeSelect as Element);

    const documentOption = screen.getByText('–î–æ–∫—É–º–µ–Ω—Ç—ã');
    await user.click(documentOption);

    await waitFor(() => {
      expect(screen.getByText('–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç')).toBeInTheDocument();
      expect(screen.queryByText('–¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–µ')).not.toBeInTheDocument();
      expect(screen.queryByText('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')).not.toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async () => {
    const user = userEvent.setup();
    const mockOnSortChange = jest.fn();
    render(<NotificationsBar {...defaultProps} />);

    const fieldSelect = screen.getByText('–î–∞—Ç–∞').closest('div');
    await user.click(fieldSelect as Element);

    const titleOption = screen.getByText('–ó–∞–≥–æ–ª–æ–≤–æ–∫');
    await user.click(titleOption);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    await waitFor(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è
      expect(screen.getByText('–ó–∞–≥–æ–ª–æ–≤–æ–∫')).toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    const starButtons = screen.getAllByRole('button', { name: /–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ/i });
    await user.click(starButtons[0]);

    expect(defaultProps.onNotificationUpdate).toHaveBeenCalled();
  });

  it('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    const eyeButton = screen.getAllByTitle('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ')[0];
    await user.click(eyeButton);

    expect(defaultProps.onNotificationUpdate).toHaveBeenCalled();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    const searchInput = screen.getByPlaceholderText('–ü–æ–∏—Å–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º...');
    await user.type(searchInput, '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π');

    await waitFor(() => {
      expect(screen.getByText('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')).toBeInTheDocument();
      expect(screen.getByText('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫')).toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ onNotificationsChange', () => {
    expect(() => {
      render(<NotificationsBar notifications={mockNotifications} />);
    }).not.toThrow();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å–µ–∫—Ü–∏–π', () => {
    render(<NotificationsBar {...defaultProps} />);

    // 1 –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const starredSection = screen.getByText('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è').nextElementSibling;
    expect(starredSection).toHaveTextContent('1');

    // 2 –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const regularSection = screen.getByText('üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è').nextElementSibling;
    expect(regularSection).toHaveTextContent('2');
  });

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    const typeSelect = screen.getByText('–í—Å–µ —Ç–∏–ø—ã').closest('div');
    await user.click(typeSelect as Element);
    const documentOption = screen.getByText('–î–æ–∫—É–º–µ–Ω—Ç—ã');
    await user.click(documentOption);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const statusSelect = screen.getByText('–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã').closest('div');
    await user.click(statusSelect as Element);
    const unreadOption = screen.getByText('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
    await user.click(unreadOption);

    await waitFor(() => {
      // –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      expect(screen.getByText('–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç')).toBeInTheDocument();
      expect(screen.queryByText('–¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–µ')).not.toBeInTheDocument();
      expect(screen.queryByText('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')).not.toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π grid layout', () => {
    const { container } = render(<NotificationsBar {...defaultProps} />);

    const grids = container.querySelectorAll('.grid.gap-4.grid-cols-1.lg\\:grid-cols-2.xl\\:grid-cols-3');
    expect(grids.length).toBeGreaterThan(0);
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö', () => {
    const notificationsWithoutStarred = mockNotifications.map(n => ({ ...n, starred: false }));
    
    render(<NotificationsBar notifications={notificationsWithoutStarred} />);

    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ–∫—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    expect(screen.queryByText('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')).not.toBeInTheDocument();
    expect(screen.getByText('üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', () => {
    render(<NotificationsBar notifications={[]} />);

    expect(screen.getByText('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–µ—Å–µ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    const typeSelect = screen.getByText('–í—Å–µ —Ç–∏–ø—ã').closest('div');
    await user.click(typeSelect as Element);
    const documentOption = screen.getByText('–î–æ–∫—É–º–µ–Ω—Ç—ã');
    await user.click(documentOption);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–µ—Å–µ—Ç–æ–≤
    const presetsButton = screen.getByText('–ü—Ä–µ—Å–µ—Ç—ã');
    await user.click(presetsButton);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç
    const saveButton = screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä');
    await user.click(saveButton);

    // –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
    const input = screen.getByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞...');
    await user.type(input, '–¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã');

    const saveModalButton = screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
    await user.click(saveModalButton);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª—Å—è toast
    await waitFor(() => {
      expect(screen.getByText('–ü—Ä–µ—Å–µ—Ç "–¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã" —Å–æ—Ö—Ä–∞–Ω–µ–Ω')).toBeInTheDocument();
    });
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', async () => {
    const user = userEvent.setup();
    render(<NotificationsBar {...defaultProps} />);

    expect(screen.getByText('2 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();

    // –ü–æ–º–µ—á–∞–µ–º –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    const eyeButton = screen.getAllByTitle('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ')[0];
    await user.click(eyeButton);

    await waitFor(() => {
      expect(screen.getByText('1 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
    });
  });
});